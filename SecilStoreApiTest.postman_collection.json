{
	"info": {
		"_postman_id": "8a08d336-dc6e-4876-8049-0f5a161e24f9",
		"name": "SeÃ§ilStoreApiTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30935699"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"let userId = response.id;\r",
							"pm.globals.set(\"userId\", userId);\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('username');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('address');\r",
							"    pm.expect(responseData).to.have.property('phone');\r",
							"    pm.expect(responseData).to.have.property('website');\r",
							"    pm.expect(responseData).to.have.property('company');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Address contains the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.address).to.be.an('object');\r",
							"    pm.expect(responseData.address).to.have.property('street');\r",
							"    pm.expect(responseData.address).to.have.property('suite');\r",
							"    pm.expect(responseData.address).to.have.property('city');\r",
							"    pm.expect(responseData.address).to.have.property('zipcode');\r",
							"    pm.expect(responseData.address.geo).to.be.an('object');\r",
							"    pm.expect(responseData.address.geo).to.have.property('lat');\r",
							"    pm.expect(responseData.address.geo).to.have.property('lng');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Geo contains the required fields - lat and lng\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.have.property('address');\r",
							"  pm.expect(responseData.address).to.have.property('geo');\r",
							"  pm.expect(responseData.address.geo).to.have.property('lat');\r",
							"  pm.expect(responseData.address.geo).to.have.property('lng');\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomNumber = _.random(100,999);\r",
							"pm.globals.set(\"randomNumber\", randomNumber);\r",
							"\r",
							"const randomZipCode = _.random(1000,9999);\r",
							"pm.globals.set(\"randomZipCode\", randomZipCode);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"address\": {\r\n        \"street\": \"{{$randomStreetName}}\",\r\n        \"suite\": \"Suite {{randomNumber}}\",\r\n        \"city\": \"{{$randomCity}}\",\r\n        \"zipcode\": \"{{randomZipCode}}\",\r\n        \"geo\": {\r\n            \"lat\": \"{{$randomLatitude}}\",\r\n            \"lng\": \"{{$randomLongitude}}\"\r\n        }\r\n    },\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"website\": \"jacynthe.com\",\r\n    \"company\": {\r\n        \"name\": \"{{$randomCompanyName}}\",\r\n        \"catchPhrase\": \"Implemented secondary concept\",\r\n        \"bs\": \"e-enable extensible e-tailers\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(user){\r",
							"        pm.expect(user).to.have.property('id');\r",
							"        pm.expect(user).to.have.property('name');\r",
							"        pm.expect(user).to.have.property('username');\r",
							"        pm.expect(user).to.have.property('email');\r",
							"        pm.expect(user).to.have.property('address');\r",
							"        pm.expect(user).to.have.property('phone');\r",
							"        pm.expect(user).to.have.property('website');\r",
							"        pm.expect(user).to.have.property('company');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.email).to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the address object and its fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.address).to.be.an('object');\r",
							"        pm.expect(user.address.street).to.exist.and.to.be.a('string');\r",
							"        pm.expect(user.address.suite).to.exist.and.to.be.a('string');\r",
							"        pm.expect(user.address.city).to.exist.and.to.be.a('string');\r",
							"        pm.expect(user.address.zipcode).to.exist.and.to.be.a('string');\r",
							"        pm.expect(user.address.geo).to.exist.and.to.be.an('object');\r",
							"        pm.expect(user.address.geo.lat).to.exist.and.to.be.a('string');\r",
							"        pm.expect(user.address.geo.lng).to.exist.and.to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Company name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.company.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Company name should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Schema validation for user response\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"  responseData.forEach(user => {\r",
							"    pm.expect(user).to.have.property('id').that.is.a('number');\r",
							"    pm.expect(user).to.have.property('name').that.is.a('string');\r",
							"    pm.expect(user).to.have.property('username').that.is.a('string');\r",
							"    pm.expect(user).to.have.property('email').that.is.a('string');\r",
							"    pm.expect(user).to.have.property('address').that.is.an('object');\r",
							"    pm.expect(user.address).to.have.property('street').that.is.a('string');\r",
							"    pm.expect(user.address).to.have.property('suite').that.is.a('string');\r",
							"    pm.expect(user.address).to.have.property('city').that.is.a('string');\r",
							"    pm.expect(user.address).to.have.property('zipcode').that.is.a('string');\r",
							"    pm.expect(user.address).to.have.property('geo').that.is.an('object');\r",
							"    pm.expect(user.address.geo).to.have.property('lat').that.is.a('string');\r",
							"    pm.expect(user.address.geo).to.have.property('lng').that.is.a('string');\r",
							"    pm.expect(user).to.have.property('phone').that.is.a('string');\r",
							"    pm.expect(user).to.have.property('website').that.is.a('string');\r",
							"    pm.expect(user).to.have.property('company').that.is.an('object');\r",
							"    pm.expect(user.company).to.have.property('name').that.is.a('string');\r",
							"    pm.expect(user.company).to.have.property('catchPhrase').that.is.a('string');\r",
							"    pm.expect(user.company).to.have.property('bs').that.is.a('string');\r",
							"  });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read One User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate the response schema for required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"    pm.expect(responseData.username).to.exist;\r",
							"    pm.expect(responseData.email).to.exist;\r",
							"    pm.expect(responseData.address).to.exist;\r",
							"    pm.expect(responseData.phone).to.exist;\r",
							"    pm.expect(responseData.website).to.exist;\r",
							"    pm.expect(responseData.company).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Address contains required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.address).to.be.an('object');\r",
							"  pm.expect(responseData.address).to.have.property('street');\r",
							"  pm.expect(responseData.address).to.have.property('suite');\r",
							"  pm.expect(responseData.address).to.have.property('city');\r",
							"  pm.expect(responseData.address).to.have.property('zipcode');\r",
							"  pm.expect(responseData.address).to.have.property('geo').that.is.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Company contains the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.company).to.be.an('object');\r",
							"    pm.expect(responseData.company).to.have.property('name');\r",
							"    pm.expect(responseData.company).to.have.property('catchPhrase');\r",
							"    pm.expect(responseData.company).to.have.property('bs');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the required fields in the response\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData).to.include.all.keys('name', 'username', 'email', 'address', 'phone', 'website', 'company', 'id');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email format is valid\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is not valid\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify required fields in address object\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.address).to.be.an('object');\r",
							"  pm.expect(responseData.address).to.have.property('street').that.is.a('string');\r",
							"  pm.expect(responseData.address).to.have.property('suite').that.is.a('string');\r",
							"  pm.expect(responseData.address).to.have.property('city').that.is.a('string');\r",
							"  pm.expect(responseData.address).to.have.property('zipcode').that.is.a('string');\r",
							"  pm.expect(responseData.address.geo).to.be.an('object');\r",
							"  pm.expect(responseData.address.geo).to.have.property('lat').that.is.a('string');\r",
							"  pm.expect(responseData.address.geo).to.have.property('lng').that.is.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Geo object contains the required fields - lat and lng\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('address');\r",
							"    pm.expect(responseData.address).to.have.property('geo');\r",
							"    pm.expect(responseData.address.geo).to.have.property('lat');\r",
							"    pm.expect(responseData.address.geo).to.have.property('lng');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomNumber = _.random(100,999);\r",
							"pm.globals.set(\"randomNumber\", randomNumber);\r",
							"\r",
							"const randomZipCode = _.random(1000,9999);\r",
							"pm.globals.set(\"randomZipCode\", randomZipCode);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"address\": {\r\n        \"street\": \"{{$randomStreetName}}\",\r\n        \"suite\": \"Suite {{randomNumber}}\",\r\n        \"city\": \"{{$randomCity}}\",\r\n        \"zipcode\": \"{{randomZipCode}}\",\r\n        \"geo\": {\r\n            \"lat\": \"{{$randomLatitude}}\",\r\n            \"lng\": \"{{$randomLongitude}}\"\r\n        }\r\n    },\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"website\": \"jacynthe.com\",\r\n    \"company\": {\r\n        \"name\": \"{{$randomCompanyName}}\",\r\n        \"catchPhrase\": \"Implemented secondary concept\",\r\n        \"bs\": \"e-enable extensible e-tailers\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has a valid Content-Type header\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is an empty object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.eql({});\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Ensure that the response does not contain any sensitive information\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.not.include.keys('password', 'creditCardNumber', 'socialSecurityNumber');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/{{userId}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}